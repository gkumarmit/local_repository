import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CustomLogger extends Logger {

    private Logger logger;

    protected CustomLogger(String name) {
        super(name, LoggerFactory.getLogger(name).getClass());
        logger = LoggerFactory.getLogger(name);
    }

    @Override
    public void info(String msg) {
	// Get access to TraceId and append Here
        String modifiedMsg = "TraceId,AgentId,ThreadId: " + msg;
        logger.info(modifiedMsg);
    }

    // Override other logging methods if needed

    // Create factory method to get an instance of CustomLogger
    public static CustomLogger getLogger(String name) {
        return new CustomLogger(name);
    }
}
-------------------------------------------------------------------------------
import org.slf4j.ILoggerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class CustomLoggerConfiguration {

    @Bean
    public ILoggerFactory loggerFactory() {
        return new CustomLoggerFactory();
    }

    private static class CustomLoggerFactory implements ILoggerFactory {
        @Override
        public Logger getLogger(String name) {
            return CustomLogger.getLogger(name);
        }
    }
}

--------------------------------------------------------------------------
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.util.UUID;

@Component
@Aspect
public class EventIdAspect {
    private Logger logger = LoggerFactory.getLogger(EventIdAspect.class);
    private ThreadLocal<RehTrace> eventIdThreadLocal = new ThreadLocal<>();

    @Before("execution(* com.example.yourpackage..*(..))")
    public void assignEventId(JoinPoint joinPoint) {
        String eventId = UUID.randomUUID().toString();
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();
		
		// Populate RehTrace
		RehTrace rehTrace=new RehTrace();
		rehTrace.setEventId(eventId);
		
        eventIdThreadLocal.set(rehTrace);
        logger.info("New event ID {} generated for {}.{}", eventId, className, methodName);
    }

    public RehTrace getEventId() {
        return eventIdThreadLocal.get();
    }
}
--------------------------------------------------------------------
public class RehTrace{
	private String eventId;
	private String agentId;
	private String threadId;

}

----------------------------------------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class ValueConsumer {
    private EventIdAspect EventIdAspect;

    @Autowired
    public ValueConsumer(EventIdAspect eventIdAspect) {
        this.eventIdAspect = eventIdAspect;
    }

    public void processValue() {
        RehTrace value = eventIdAspect.getValue();
        //Use this RehTrace value in logging.
    }

    
}

-------------------------------------------------------

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

@Component
public class ValueConsumer {
    private ApplicationContext applicationContext;

    @Autowired
    public void setApplicationContext(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }

    public void processValue() {
        EventIdAspect eventIdAspect = applicationContext.getBean(EventIdAspect.class);
         RehTrace value = eventIdAspect.getValue();
        //Use this RehTrace value in logging.
    }
}

---------------------------------------------
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
public @interface CustomLogger {
    String value() default "";
}

--------------------------------------------------------------
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.stereotype.Component;

import java.lang.reflect.Field;

@Component
public class CustomLoggerBeanPostProcessor implements BeanPostProcessor {

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        // Get all the fields of the bean
        Field[] fields = bean.getClass().getDeclaredFields();

        // Iterate through the fields
        for (Field field : fields) {
            // Check if the field is annotated with @CustomLogger
            if (field.isAnnotationPresent(CustomLogger.class)) {
                // Set the custom logger to the field
                field.setAccessible(true);
                try {
                    Logger logger = LoggerFactory.getLogger(bean.getClass());
                    field.set(bean, logger);
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
            }
        }

        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        return bean;
    }
}

------------------------------------
import org.slf4j.Logger;
import org.springframework.stereotype.Component;

@Component
public class SampleClass {

    @CustomLogger
    private Logger logger;

    public void doSomething() {
        logger.info("Doing something...");
    }
}


grep -Pzo '(?s)\[2023-01-01 08:00:00\].*?\[2023-01-01 12:00:00].*?error' example.log


_-----_--------------

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class BatchInsertLoadTest {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/database";
    private static final String USERNAME = "username";
    private static final String PASSWORD = "password";
    private static final int NUM_RECORDS = 60000;
    private static final int NUM_THREADS = 10;
    private static final int BATCH_SIZE = 5000;

    public static void main(String[] args) {
        // Create a latch to wait for all threads to finish
        CountDownLatch latch = new CountDownLatch(NUM_THREADS);

        // Create a thread pool
        ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);

        long startTime = System.currentTimeMillis();

        for (int i = 0; i < NUM_THREADS; i++) {
            int startIndex = (i * NUM_RECORDS / NUM_THREADS) + 1;
            int endIndex = ((i + 1) * NUM_RECORDS / NUM_THREADS);

            // Execute the task in a thread
            executor.execute(new BatchInsertTask(startIndex, endIndex, latch));
        }

        try {
            // Wait for all threads to finish
            latch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Shutdown the thread pool
        executor.shutdown();

        long endTime = System.currentTimeMillis();
        long duration = endTime - startTime;

        System.out.println("Load test complete in " + duration + " milliseconds.");
    }

    private static class BatchInsertTask implements Runnable {
        private final int startIndex;
        private final int endIndex;
        private final CountDownLatch latch;

        public BatchInsertTask(int startIndex, int endIndex, CountDownLatch latch) {
            this.startIndex = startIndex;
            this.endIndex = endIndex;
            this.latch = latch;
        }

        @Override
        public void run() {
            try (Connection connection = ConnectionPool.getConnection()) {
                String sql = "INSERT INTO your_table (column1, column2) VALUES (?, ?)";
                PreparedStatement statement = connection.prepareStatement(sql);

                // Disable auto-commit to enable batch processing
                connection.setAutoCommit(false);

                for (int i = startIndex; i <= endIndex; i++) {
                    // Set values for each record
                    statement.setString(1, "value1");
                    statement.setString(2, "value2");

                    // Add the statement to the batch
                    statement.addBatch();

                    // Execute the batch after reaching the batch size
                    if (i % BATCH_SIZE == 0) {
                        statement.executeBatch();
                    }
               

----------------------------
import com.mchange.v2.c3p0.ComboPooledDataSource;
import org.springframework.jdbc.core.JdbcTemplate;

public class ConnectionPoolExample {

    private ComboPooledDataSource dataSource;
    private JdbcTemplate jdbcTemplate;

    public ConnectionPoolExample() {
        // Initialize the ComboPooledDataSource
        dataSource = new ComboPooledDataSource();
        
        // Set the required properties for the data source (e.g., JDBC URL, username, password)
        dataSource.setJdbcUrl("jdbc:mysql://localhost:3306/mydatabase");
        dataSource.setUser("username");
        dataSource.setPassword("password");
        
        // Create the JdbcTemplate using the ComboPooledDataSource
        jdbcTemplate = new JdbcTemplate(dataSource);
    }
    
    public int getActiveConnectionCount() {
        // Retrieve the active connection count from the ComboPooledDataSource
        return dataSource.getNumBusyConnectionsAllUsers();
    }

    public static void main(String[] args) {
        ConnectionPoolExample example = new ConnectionPoolExample();
        
        int activeConnections = example.getActiveConnectionCount();
        System.out.println("Active Connections: " + activeConnections);
    }
}

	
	
